{"version":3,"sources":["js/ignoreKeys.js","Banner/MobileNavigation.js","Banner/Navigation.js","privateVariables.js","js/encryption.js","NewAssignments/DictationOptions.js","NewAssignments/NewAssignmentOptions.js","NewAssignments/CheckForOptions.js","NewAssignments/NewAssignmentForm.js","NewAssignments/NewAssignmentContainer.js","js/queueHelper.js","Assignment/NFInteractive.js","Token/DisplayToken.js","Token/SignAndSubmit.js","Assignment/AssignmentContainer.js","Information/TutorialBanner.js","Information/ContentContainer.js","Information/TutorialContainer.js","Information/content/contentTags.js","Information/content/studentContent.js","Information/content/instructorContent.js","Information/InfoContainer.js","Token/DisplayDecryptedToken.js","Token/TokenChecker.js","App.js","serviceWorker.js","index.js"],"names":["MobileNavigation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","path","e","setPath","state","active","toggleNav","bind","assertThisInitialized","console","log","setState","react_default","a","createElement","className","onClick","Link","to","mdbreact_esm","icon","size","Component","Navigation","_ref","Banner_MobileNavigation","privateVariables","cryptrKey","cryptr","Cryptr","DictationOptions","id","type","defaultValue","min","required","for","NewAssignmentOptions","setType","document","getElementById","value","onChange","handleChange","NewAssignments_DictationOptions","CheckForOptions","NewAssignmentForm","setLink","preventDefault","assignment","answer","playCount","preventPlayback","checked","checkFor","toConsumableArray","getElementsByClassName","map","x","filter","concat","window","location","origin","params","JSON","stringify","encrypted","encrypt","onSubmit","handleSubmit","placeholder","NewAssignments_NewAssignmentOptions","NewAssignments_CheckForOptions","NewAssignmentContainer","link","select","execCommand","href","target","NewAssignments_NewAssignmentForm","readonly","copyText","convertOptions","compact","ignoreComment","generateComparisonQueue","assignmentQueue","answerQueue","queue1","queue2","index","measureQueue","i","length","push","convert","xml2js","outerHTML","ignoreKeys","_i","_arr","ContentNFInteractive","staffCount","errors","currentErrorIndex","assignmentScore","answerScore","currentPlayCount","setAnswer","setStaffCount","setErrors","setScores","increaseErrorIndex","decreaseErrorindex","resetErrorIndex","increaseCurrentPlayCount","NFClient","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","key","err","return","assignmentScoreCode","parseNFUrl","scoreCode","answerScoreCode","assignmentHost","host","answerHost","options","width","hieght","viewParams","scale","role","displayMode","playback","height","url","splitUrl","split","answerData","errorIndex","measure","Math","floor","selectRange","clearSelection","measureSet","assignmentData","mismatch","traverseMeasureObject","currentKey","arguments","_text","toLowerCase","newKey","comparisonQueue","errorList","compareMeasures","_this2","ScoreView","assignmentFrame","answerFrame","checkWorkButton","playAnswerButton","parser","DOMParser","onload","addEventListener","stopPlayback","getNoteflightXML","data","dataXML","parseFromString","staves","getElementsByTagName","answerMeasureQueue","children","j","disabled","remove","innerHTML","onclick","assignmentXML","measureErrors","deselectMeasures","passedAssignment","parseInt","playFromSelection","innerText","componentSetup","showError","passed","DisplayToken","studentName","tokenData","date","Date","encryptData","SignAndSubmit","signature","setSignature","Token_DisplayToken","AssignmentContainer","search","decrypted","decrypt","parse","match","Redirect","decryptParams","NFInteractive","Token_SignAndSubmit","TutorialBanner","toggleActive","activeState","title","ContentContainer","content","TutorialContainer","Information_TutorialBanner","Information_ContentContainer","paragraph","text","sectionHeading","orderedList","listItems","item","unorderedList","studentContent","instructorContent","InfoContainer","domainName","Information_TutorialContainer","DisplayDecryptedToken","token","error","getDay","getMonth","getDate","getFullYear","getHours","getMinutes","decryptToken","parseDate","TokenChecker","currentToken","setToken","style","margin","minHeight","Token_DisplayDecryptedToken","App","URLSearchParams","get","forceUpdate","BrowserRouter","Banner_Navigation","Assignment_AssignmentContainer","Route","exact","component","Boolean","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba5be6db.chunk.js","sourcesContent":["\r\n// a default list of keys in the score objects to ignore when comparing assignment and answer scores\r\n\r\nlet ignoreKeys = {};\r\n\r\n// add new keys as strings to this list below. ignoreKeys object automatically generated\r\nlet keyList = [\r\n    \"cx1\",\r\n    \"cx2\",\r\n    \"cy1\",\r\n    \"cy2\",\r\n    \"ascent\",\r\n    \"direction\",\r\n    \"dx\",\r\n    \"dy\",\r\n    \"endx\",\r\n    \"endx\",\r\n    \"color\",\r\n\r\n    \"performance\",\r\n    \"chordSymbol\",\r\n    \"slur\"\r\n]\r\n\r\nfor(let key of keyList){\r\n    ignoreKeys[key] = true;\r\n};\r\n\r\nexport default ignoreKeys;\r\n\r\n","import React, {Component} from 'react';\r\n\r\nimport {Link} from 'react-router-dom';\r\nimport {MDBIcon} from 'mdbreact';\r\n\r\nclass MobileNavigation extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            active: false\r\n        }\r\n        this.toggleNav = this.toggleNav.bind(this);\r\n    }\r\n\r\n    handleClick = (path) => {\r\n        return (e) => {\r\n            this.props.setPath(path);\r\n        }\r\n    }\r\n\r\n\r\n    toggleNav(){\r\n        console.log(\"CALLED\")\r\n        let active = !this.state.active\r\n        this.setState({active}) \r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <nav className=\"nav-banner nav-mobile\" onClick={this.toggleNav}>\r\n                {\r\n                    this.state.active ? \r\n                        <div>\r\n                            <div className=\"nav-button\">\r\n                                <Link to=\"/\" onClick={this.handleClick(\"/\")}>Information & Tutorials</Link>\r\n                            </div>\r\n                            <hr/>\r\n                            <div className=\"nav-button\">\r\n                                <Link to=\"/new\" onClick={this.handleClick(\"/new\")}>New Assignment</Link>\r\n                            </div>\r\n                            <hr/>\r\n                            <div className=\"nav-button\">\r\n                                <Link to=\"/token-checker\" onClick={this.handleClick(\"/token-checker\")}>Check Token</Link>\r\n                            </div>    \r\n                        </div>\r\n                    :\r\n                    <MDBIcon icon=\"bars\" size=\"2x\" className=\"white-text hamburger-icon\"/>        \r\n\r\n                }\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MobileNavigation;","import React from 'react';\r\n\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport MobileNavigation from './MobileNavigation';\r\n\r\nconst Navigation = ({setPath}) => {\r\n\r\n   const handleClick = (path) => {\r\n        return (e) => {\r\n            setPath(path);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n\r\n            <nav className=\"nav-banner nav-desktop\">\r\n                <div className=\"nav-button\">\r\n                    <Link to=\"/\" onClick={handleClick(\"/\")}>Information & Tutorials</Link>\r\n                </div>\r\n                <div className=\"nav-button\">\r\n                    <Link to=\"/new\" onClick={handleClick(\"/new\")}>New Assignment</Link>\r\n                </div>\r\n                <div className=\"nav-button\">\r\n                    <Link to=\"/token-checker\" onClick={handleClick(\"/token-checker\")}>Check Token</Link>\r\n                </div>\r\n            </nav>\r\n\r\n            <MobileNavigation setPath={setPath} />\r\n    \r\n        </div>\r\n\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Navigation;","const privateVariables = {\n    cryptrKey: \"SECRET\",\n}\n\nexport default privateVariables;","import Cryptr from 'cryptr'\r\nimport privateVariables from '../privateVariables';\r\n\r\nconst cryptr = new Cryptr(privateVariables.cryptrKey);\r\n\r\nexport default cryptr;","import React from 'react';\r\n\r\nconst DictationOptions = () => {\r\n\r\n    return(\r\n        <div id=\"dictation-options\">\r\n            <label>Play Count (0 = Unlimited)</label><br/>\r\n            <input id=\"play-count\" type=\"number\" defaultValue=\"0\" min=\"0\" required/><br/>\r\n\r\n            <input id=\"prevent-playback\" type=\"checkbox\"/>\r\n            <label for=\"prevent-playback\">Prevent Student Score Playback</label>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default DictationOptions;","import React, {Component} from 'react';\r\n\r\nimport DictationOptions from './DictationOptions';\r\n\r\nclass NewAssignmentOptions extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            type: \"written\"\r\n        }\r\n\r\n        this.setType = this.setType.bind(this);\r\n    }\r\n\r\n    setType(){\r\n        this.setState({\r\n            type: document.getElementById(\"assignment-type\").value\r\n        })\r\n    }\r\n\r\n    handleChange(setType){\r\n        return () => {\r\n            setType()\r\n            console.log(\"called\")\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <label>Assignment Type</label><br/>\r\n                <select id=\"assignment-type\" onChange={this.handleChange(this.setType)}>\r\n                    <option value=\"written\">Written</option>\r\n                    <option value=\"dictation\">Dictation</option>\r\n                </select>\r\n                <br/>\r\n                {\r\n                    this.state.type === \"dictation\"\r\n                    &&\r\n                    <DictationOptions />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewAssignmentOptions;","import React from 'react';\r\n\r\n/* \r\nIMPORTANT:\r\n\r\nAny new options you add here must also be added to the ignoreKeys file\r\nThis is so the comparison method will default to ignoring those items\r\nChecking them here will then switch them off in ignoreKeys, and they will be graded when comparing scores\r\n\r\n*/\r\n\r\nconst CheckForOptions = () => {\r\n\r\n    return(\r\n        <div id=\"check-for-options\">\r\n            <p>\r\n                All assignments are checked for correct pitches and rhythms. \r\n                You can select additional grading criteria from the list below (these will not be checked for by default)\r\n            </p>\r\n            <input id=\"slurs\" value=\"slur\" className=\"check-for\" type=\"checkbox\" />\r\n            <label for=\"slurs\" >Slurs/Phrase Marks</label><br/>\r\n            \r\n            <input id=\"rna\" value=\"chordSymbol\" className=\"check-for\" type=\"checkbox\" />\r\n            <label for=\"rna\">Roman Numeral & Chord Analysis</label><br/>\r\n            \r\n            <input id=\"text\" value=\"performance\" className=\"check-for\" type=\"checkbox\" />\r\n            <label for=\"text\">Other Text</label>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default CheckForOptions;","import React, {Component} from 'react';\r\n\r\nimport cryptr from '../js/encryption';\r\n\r\nimport NewAssignmentOptions from './NewAssignmentOptions';\r\nimport CheckForOptions from './CheckForOptions';\r\n\r\nclass NewAssignmentForm extends Component {\r\n\r\n\r\n    handleSubmit(setLink){\r\n        return (e) => {\r\n            e.preventDefault();\r\n\r\n            const assignment = document.getElementById(\"assignment\").value;\r\n            const answer = document.getElementById(\"answer\").value;\r\n            const type = document.getElementById(\"assignment-type\").value\r\n            \r\n            const playCount = type === \"dictation\" ? document.getElementById(\"play-count\").value : null;\r\n            const preventPlayback = type === \"dictation\" ? document.getElementById(\"prevent-playback\").checked : null;\r\n\r\n            const checkFor = [...document.getElementsByClassName(\"check-for\")].map(x => {\r\n                if(x.checked){\r\n                    return x.value\r\n                } else {\r\n                    return null\r\n                }\r\n            }).filter(x => {if(x) return x})\r\n\r\n            let path = `${window.location.origin}?assignment=`\r\n            let params = JSON.stringify({assignment, answer, type, playCount, preventPlayback, checkFor})\r\n            \r\n            let encrypted = cryptr.encrypt(params);\r\n\r\n            setLink(path + encrypted)\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            \r\n            <form id=\"new-assignment-form\" onSubmit={this.handleSubmit(this.props.setLink)}>\r\n                <div className=\"assignment-form-section\">\r\n                    <h2 className=\"new-assignment-section-heading\">Score URLs</h2>\r\n                    <label>Assignment Score*</label><br/>\r\n                    <input id=\"assignment\" type=\"text\" placeholder=\"Noteflight URL\" required/><br/>\r\n                    \r\n                    <label>Answer Score*</label><br/>\r\n                    <input id=\"answer\" type=\"text\" placeholder=\"Noteflight URL\" required/><br/>\r\n                </div>\r\n\r\n                <div className=\"assignment-form-section\">\r\n                    <h2 className=\"new-assignment-section-heading\">Assingnment Options</h2>\r\n                    <NewAssignmentOptions />\r\n                </div>\r\n\r\n                <div className=\"assignment-form-section\">\r\n                    <h2 className=\"new-assignment-section-heading\">Grading Options</h2>\r\n                    <CheckForOptions />\r\n                </div>\r\n\r\n                <p>(* indicates a required field)</p>\r\n                <input type=\"submit\" value=\"Generate Assignment Link\" />\r\n            </form>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default NewAssignmentForm;","import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nimport NewAssignmentForm from './NewAssignmentForm';\r\n\r\nclass NewAssignmentContainer extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            link: null\r\n        }\r\n\r\n        this.setLink = this.setLink.bind(this);\r\n    }\r\n\r\n    setLink(link){\r\n        console.log(\"called\")\r\n        this.setState({link});\r\n    }\r\n\r\n    copyText(e){\r\n        const text = document.getElementById(\"copy-link\");\r\n        debugger\r\n        text.select();\r\n        document.execCommand(\"copy\");\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"new-assignment-container\">\r\n            <section className=\"instructions text-box\">\r\n                <h2>Create a new assignment</h2>\r\n                <p>\r\n                    Welcome to the assignment creator! To make a new assignment, you will need two URLs: One to your assignment score that you created in <a className=\"in-text-link\" href=\"https://www.noteflight.com\" target=\"_blank\">Noteflight</a> (the one people will interact with), and an answer template score. \r\n                    Your answer score should be the same as the assignment score, but with all the answers marked exactly as you would like them in the assignment.\r\n                    Make sure both scores are shared on Noteflight with all users, a specific user, or a specific group, and that \"Let people copy & export this score\" is checked.\r\n                </p>\r\n                <p>\r\n                    See the {/* <Link to=\"/\" className=\"in-text-link\"> */}tutorials{/* </Link> */} for more information on how to setup your scores.\r\n                </p>\r\n            </section>\r\n                <NewAssignmentForm setLink={this.setLink}/>\r\n                {this.state.link \r\n                && \r\n                <div>\r\n                    <p>Share the link below to give students and other users access to your assignment</p>\r\n                    <textarea id=\"copy-link\" value={this.state.link} readonly=\"true\"></textarea>\r\n                    <button className=\"copy-text-button\" onClick={this.copyText}>Copy to Clipboard</button>\r\n                    <br/>\r\n                    <a href={this.state.link} target=\"_blank\">See Your Assignment</a>\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewAssignmentContainer","\r\nimport convert from 'xml-js';\r\n\r\nconst convertOptions = {compact: true, ignoreComment: true}\r\n\r\nconst queueElementToObject = (queue1, queue2, index) => {\r\n    const obj1 = convert.xml2js(queue1[index].outerHTML, convertOptions)\r\n    const obj2 = convert.xml2js(queue2[index].outerHTML, convertOptions)\r\n    return [obj1, obj2]\r\n}\r\n\r\nconst generateComparisonQueue = (assignmentQueue, answerQueue) => {\r\n    let measureQueue = []\r\n    for(let i = 0; i < answerQueue.length; i++){\r\n        measureQueue.push(queueElementToObject(assignmentQueue, answerQueue, i))\r\n    }\r\n    return measureQueue\r\n}\r\n\r\nexport default generateComparisonQueue;","import React, {Component} from 'react';\r\nimport {MDBIcon} from 'mdbreact'\r\n\r\n// import convert from 'xml-js';\r\nimport generateComparisonQueue from '../js/queueHelper';\r\nimport ignoreKeys from '../js/ignoreKeys';\r\n\r\n// import parseOptionsString from '../../js/parseOptionsString';\r\n\r\nclass ContentNFInteractive extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            answer: null, \r\n            staffCount: 0,\r\n            errors: [],\r\n            currentErrorIndex: 0,\r\n            assignmentScore: null,\r\n            answerScore: null,\r\n            currentPlayCount: 0,\r\n        };\r\n        this.setAnswer = this.setAnswer.bind(this);\r\n        this.setStaffCount = this.setStaffCount.bind(this);\r\n        this.setErrors = this.setErrors.bind(this);\r\n        this.setScores = this.setScores.bind(this);\r\n        this.increaseErrorIndex = this.increaseErrorIndex.bind(this);\r\n        this.decreaseErrorindex = this.decreaseErrorindex.bind(this);\r\n        this.resetErrorIndex = this.resetErrorIndex.bind(this);\r\n        this.increaseCurrentPlayCount = this.increaseCurrentPlayCount.bind(this);\r\n    }\r\n\r\n    componentSetup(){\r\n        const {params} = this.props\r\n        this.params = params\r\n        this.assignmentScore = params.assignment;\r\n        this.answerScore = params.answer;\r\n\r\n        this.NFClient = window.NFClient;\r\n\r\n        for(let key of params.checkFor){\r\n            ignoreKeys[key] = false;\r\n        }\r\n\r\n        this.assignmentScoreCode = this.parseNFUrl(params.assignment).scoreCode\r\n        this.answerScoreCode = this.parseNFUrl(params.answer).scoreCode\r\n        \r\n        const assignmentHost = this.parseNFUrl(params.assignment).host\r\n        const answerHost = this.parseNFUrl(params.answer).host\r\n        debugger\r\n        this.options = {};\r\n\r\n        this.options.assignment = {\r\n            width: \"100%\",\r\n            hieght: \"100%\",\r\n            host: assignmentHost,\r\n            viewParams: {\r\n                scale: 1.5,\r\n                role: \"template\",\r\n                displayMode: \"paginated\",\r\n                playback: !params.preventPlayback ? \"normal\" : \"silent\"\r\n            }\r\n        }\r\n        \r\n        this.options.answer = {\r\n            height: 1,\r\n            width: 1,\r\n            host: answerHost,\r\n            viewParams: {\r\n                scale: 0.1,\r\n                role: \"reader\",\r\n                displayMode: \"paginated\",\r\n            }\r\n        }\r\n    }\r\n\r\n    parseNFUrl(url){\r\n        let splitUrl = url.split(\"/\")\r\n        return {\r\n            host: splitUrl[2],\r\n            scoreCode: splitUrl[splitUrl.length - 1]\r\n        }\r\n    }\r\n\r\n    setAnswer(answerData){\r\n        this.setState({\r\n            answerData\r\n        })\r\n    }\r\n\r\n    setStaffCount(staffCount){\r\n        this.setState({staffCount})\r\n    }\r\n\r\n    setErrors(errors){\r\n        this.setState({errors})\r\n    }\r\n\r\n    setScores(assignmentScore, answerScore){\r\n        this.setState({\r\n            assignmentScore,\r\n            answerScore\r\n        })\r\n    }\r\n\r\n    increaseErrorIndex(){\r\n        let {currentErrorIndex} = this.state\r\n        if(currentErrorIndex + 1 < this.state.errors.length){\r\n            currentErrorIndex++\r\n        }\r\n        this.setState({currentErrorIndex})\r\n    }\r\n\r\n    decreaseErrorindex(){\r\n        let {currentErrorIndex} = this.state;\r\n        if(currentErrorIndex - 1 >= 0){\r\n            currentErrorIndex--;\r\n        }\r\n        this.setState({currentErrorIndex});\r\n    }\r\n\r\n    resetErrorIndex(){\r\n        this.setState({currentErrorIndex: 0});\r\n    }\r\n\r\n    increaseCurrentPlayCount(){\r\n        let {currentPlayCount} = this.state;\r\n        currentPlayCount++\r\n        this.setState({currentPlayCount})\r\n        return currentPlayCount;\r\n    }\r\n\r\n    showError(index){\r\n\r\n        let errorIndex = this.state.errors[index]\r\n        let measure = (Math.floor(errorIndex / this.state.staffCount))\r\n        \r\n        this.state.assignmentScore.selectRange(\r\n            measure, // start of measure\r\n            0, // start offset \r\n            measure, // start of measure again\r\n            100, // the offset (set to a high number to almost guarantee it selects the whole measure)\r\n            [errorIndex % this.state.staffCount] // staff\r\n        )        \r\n    }\r\n\r\n    deselectMeasures(){\r\n        this.state.assignmentScore.clearSelection()\r\n    }\r\n\r\n    //   NF-XML\r\n    compareMeasures(measureSet){\r\n        let assignmentData = measureSet[0];\r\n        let answerData = measureSet[1];\r\n\r\n        let mismatch = false\r\n\r\n        const traverseMeasureObject = (assignment, answer, currentKey = \"measure\") => {            \r\n            // if the assignment does not even have the currentKey, return an error\r\n            if(!assignment[currentKey]){\r\n                mismatch = true;\r\n                return\r\n            }\r\n            \r\n            // if the assignment and answer are themselves a value (not a new key), but they do not match\r\n            // return an error\r\n            if(typeof answer !== 'object'){\r\n                if(assignment !== answer){\r\n                    mismatch = true;\r\n                    return\r\n                } else {\r\n                    return\r\n                }\r\n            }\r\n            \r\n            // If the currentKey is specifically \"chord\", then we need to check for capitalization (direct match)\r\n            // other text elements are handled below. \r\n            if(currentKey === \"chord\"){\r\n                if(assignment[currentKey]._text !== answer[currentKey]._text){\r\n                    mismatch = true;\r\n                    return\r\n                } else {\r\n                    return\r\n                }\r\n            }\r\n\r\n            // if both have a value at the currentKey (that value will be a string in this XML to JS conversion)\r\n            // but they don't match (we check lowerCase here because for anything except chords we don't care about case)\r\n            // return an error\r\n            if(typeof answer[currentKey] === 'string'){\r\n                if(!assignment || answer[currentKey].toLowerCase() !== assignment[currentKey].toLowerCase()){\r\n                    mismatch = true;\r\n                    return\r\n                } else {\r\n                    return\r\n                }\r\n            }\r\n\r\n            for(let newKey in answer[currentKey]){\r\n                if(ignoreKeys[newKey]) continue\r\n                // console.log(newKey)\r\n                if(assignment && answer){\r\n                    traverseMeasureObject(assignment[currentKey], answer[currentKey], newKey)\r\n                }\r\n            }\r\n        }\r\n\r\n        traverseMeasureObject(assignmentData, answerData)\r\n        return mismatch\r\n    }\r\n\r\n    measureErrors(assignmentQueue, answerQueue){\r\n        let comparisonQueue = generateComparisonQueue(assignmentQueue, answerQueue);\r\n        let errorList = []\r\n        for(let i = 0; i < comparisonQueue.length; i++){\r\n            let error = this.compareMeasures(comparisonQueue[i]);\r\n            if(error) errorList.push(i)\r\n        }\r\n        // a set of measures in order where an error occured\r\n        return errorList;\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        // create the assignment and answer score iframes via the noteflight api\r\n        const assignment = new this.NFClient.ScoreView(this.assignmentScoreCode, this.assignmentScoreCode, this.options.assignment);\r\n        const answer = new this.NFClient.ScoreView(this.answerScoreCode, this.answerScoreCode, this.options.answer);\r\n        this.setScores(assignment, answer);\r\n        // get the newly created iframe objects for later use\r\n        const assignmentFrame = document.getElementById(this.assignmentScoreCode);\r\n        const answerFrame = document.getElementById(this.answerScoreCode);\r\n\r\n        // interactive buttons\r\n        const checkWorkButton = document.getElementById('check-work');\r\n        const playAnswerButton = document.getElementById('play-answer');\r\n      \r\n        const activateButtons = () => {\r\n            document.getElementById(\"reload-warning\").remove()\r\n            checkWorkButton.innerHTML = \"Check Your Work\"\r\n            checkWorkButton.disabled = false;\r\n            if(playAnswerButton){\r\n                playAnswerButton.innerHTML = \"Play Dictation Excerpt\";\r\n                playAnswerButton.disabled = false;\r\n            }\r\n        }\r\n        \r\n        // add class names here\r\n        assignmentFrame.className = \"score-container nf-assignment-score nf-interactive\"\r\n        answerFrame.className = \"score-container nf-answer-score nf-interactive\"\r\n        \r\n        // declar a new DOMParser to use to check assignment vs answer scores\r\n        let parser = new DOMParser();\r\n\r\n        // using the iframe objects from earlier, set their onload method to get the score data from each individual score\r\n        assignmentFrame.onload = () => {\r\n            console.log(\"assignment Loaded\")\r\n            assignment.addEventListener(\"scoreDataLoaded\", () => {\r\n                console.log(\"ASSIGNMENT FRAME READY FOR INTERACTION\")\r\n            })\r\n            // if preventPlayback is set:\r\n            // when a playback request is received, immediately call stop playback\r\n            if(this.params.preventPlayback){\r\n                assignment.addEventListener(\"playbackRequest\", () => {\r\n                    assignment.stopPlayback();\r\n                })\r\n            }\r\n        }\r\n        \r\n        // ANSWER: When answer data loads, get and parse its NFXML and store it in the component state\r\n        answerFrame.onload = () => {\r\n            console.log(\"Answer Loaded\")\r\n            answer.addEventListener(\"scoreDataLoaded\", () => {\r\n                // if detailed grading method, load score data as musicXML (checks for perfect match)\r\n                answer.getNoteflightXML().done(data => {\r\n                    let dataXML = parser.parseFromString(data, \"text/xml\");\r\n                    let staves = [...dataXML.getElementsByTagName(\"staff\")].filter((x, i) => i > 0)\r\n                    \r\n                    this.setStaffCount(staves.length);\r\n\r\n                    let answerMeasureQueue = []; // generates an array where measures are queued in the correct order (top down each system)\r\n                    for(let i = 0; i < staves[0].children.length; i++){\r\n                        for(let j = 0; j < staves.length; j++){\r\n                            answerMeasureQueue.push(staves[j].children[i])\r\n                        }\r\n                    }\r\n\r\n                    this.setAnswer(answerMeasureQueue)\r\n                    checkWorkButton.disabled = false;\r\n                    activateButtons();\r\n                    // delete answer iframe after its data has been saved to the component state?\r\n                })\r\n            })\r\n        }\r\n\r\n        // get the button element that the user presses to check their work\r\n        // when clicked, it should check the current assignment score data against the stored answer score data\r\n        checkWorkButton.onclick = (e) => {\r\n\r\n            assignment.getNoteflightXML().done(data => {\r\n                let assignmentXML = parser.parseFromString(data, \"text/xml\");\r\n                let staves = [...assignmentXML.getElementsByTagName(\"staff\")].filter((x, i) => i > 0)\r\n                \r\n                let measureQueue = []; // generates an array where measures are queued in the correct order (top down each system)\r\n                for(let i = 0; i < staves[0].children.length; i++){\r\n                    for(let j = 0; j < staves.length; j++){\r\n                        measureQueue.push(staves[j].children[i])\r\n                    }\r\n                }\r\n\r\n                let errors = this.measureErrors(measureQueue, this.state.answerData, parser)\r\n                this.resetErrorIndex()\r\n                this.setErrors(errors);\r\n                \r\n                if(!errors.length){\r\n                    assignmentFrame.className = \"score-container nf-assignment-score nf-interactive assignment-score-passed\"\r\n                    this.deselectMeasures()\r\n                    this.props.passedAssignment();\r\n                }\r\n            })\r\n        }\r\n\r\n        // If assingmentType is a dictation, we need to allow for the user to play the dictation example\r\n        if(this.params.type === \"dictation\"){\r\n            playAnswerButton.onclick = (e) => {\r\n                \r\n                if(this.state.currentPlayCount < parseInt(this.params.playCount) || this.params.playCount === \"0\"){\r\n                    answer.playFromSelection(0);\r\n\r\n                    let newPlayCount = this.state.currentPlayCount + 1;\r\n                    if(newPlayCount === parseInt(this.params.playCount)){\r\n                        e.target.innerText = \"No Plays Remaining\"\r\n                        e.target.disabled = true;\r\n                    }\r\n\r\n                    this.increaseCurrentPlayCount();\r\n                } \r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        // calling the constructor in the render method allows us to reset the variables designated in the original constructor call \r\n        // this way when anything is that would effect the component, we can update just those parts without having to remount the entire component.\r\n        // this.constructor(this.props, this.state)\r\n        this.componentSetup();\r\n\r\n        if(this.state.errors.length){\r\n            this.showError(this.state.currentErrorIndex)\r\n        }\r\n\r\n        return (\r\n            <div id=\"nf-interactive\">\r\n                {\r\n                    this.params.type === \"dictation\" \r\n                    &&\r\n                    <div>\r\n                        <button id={`play-answer`} disabled>Loading Dictation...</button>\r\n                        <p>Plays Remaining: {this.params.playCount === \"0\" \r\n                        ? \r\n                        \"Unlimited\" : parseInt(this.params.playCount) - this.state.currentPlayCount}</p>\r\n                    </div>\r\n\r\n                }\r\n                <br/>\r\n                {/* these div element below will be replaceed by a noteflight embeded score */}\r\n                <div id={this.assignmentScoreCode}></div>\r\n                <div id={this.answerScoreCode}></div>\r\n                <br/>\r\n                <p id=\"reload-warning\"><em>If the button below is stuck on \"Loading Assignment...\", try refreshing the page. You may need to refresh a few time before the score loads correctly.</em></p>\r\n                {\r\n                    !this.props.passed\r\n                    &&\r\n                    <button id='check-work' disabled>Loading assignment...</button>\r\n                }\r\n                {\r\n                    this.state.errors.length > 0\r\n                    &&\r\n                    <div id=\"error-navigation-buttons\" className=\"section-box\">\r\n                        \r\n                        <h2>Errors</h2>\r\n                        <p>\r\n                            Use the buttons below to navigate through the marked errors on the score.\r\n                            Make sure to press the \"Check Your Work\" button to recheck for errors.\r\n                        </p>\r\n                        <button onClick={this.decreaseErrorindex}><MDBIcon icon=\"arrow-left\"/> Previous Error </button>\r\n                        <button onClick={this.increaseErrorIndex}>Next Error <MDBIcon icon=\"arrow-right\"/></button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n} \r\n    \r\n    \r\n\r\n\r\nexport default ContentNFInteractive;","import React, {Component} from 'react'\r\n\r\nimport cryptr from '../js/encryption';\r\n\r\nclass DisplayToken extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.studentName = props.studentName;\r\n        this.answer = props.answer\r\n    }\r\n\r\n    encryptData(studentName, answer){\r\n        let tokenData = {\r\n            studentName,\r\n            answer,\r\n            date: new Date()\r\n        }\r\n        console.log(tokenData);\r\n        return cryptr.encrypt(JSON.stringify(tokenData));\r\n    }\r\n\r\n    copyText(e){\r\n        const text = document.getElementById(\"encrypted-token\");\r\n        text.select();\r\n        document.execCommand(\"copy\");\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"encrypted-token\">\r\n                <p>\r\n                    The token below may serve as proof of completion for this assignment.\r\n                </p>\r\n                <textarea id=\"encrypted-token\" value={this.encryptData(this.studentName, this.answer)}></textarea>\r\n                <button onClick={this.copyText}>Copy to Clipboard</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DisplayToken;","import React, {Component} from 'react';\r\nimport DisplayToken from './DisplayToken';\r\n\r\nclass SignAndSubmit extends Component {\r\n    \r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            signature: null\r\n        }\r\n        this.setSignature = this.setSignature.bind(this);\r\n    }\r\n\r\n    setSignature(signature){\r\n        this.setState({signature});\r\n    }\r\n\r\n    handleSubmit(setSignature){\r\n        return (e) => {\r\n            e.preventDefault();\r\n            const signature = document.getElementById(\"name\").value;\r\n            setSignature(signature);\r\n        }\r\n    }\r\n\r\n    encryptToken(data){\r\n\r\n    }\r\n\r\n    render(){\r\n        \r\n        return(\r\n            <div id=\"submit-assignment\" className=\"section-box\">\r\n                {\r\n                    !this.state.signature\r\n                    &&\r\n                    <form id=\"sign-and-submit-form\" onSubmit={this.handleSubmit(this.setSignature)}>\r\n                        <h2>Congratulations! You passed!</h2>\r\n                        <p>\r\n                            If you completed this assignment as part of a class, sign your name below and submit.\r\n                            A unique token will be generated for you to use as proof of completion.\r\n                        </p>\r\n                        <label for=\"name\">Your Name</label><br/>\r\n                        <input type=\"text\" id=\"name\" /><br/>\r\n    \r\n                        <input type=\"submit\" value=\"Sign & Submit\" />\r\n                    </form>\r\n                }\r\n\r\n                {\r\n                    !!this.state.signature\r\n                    &&\r\n                    <DisplayToken studentName={this.state.signature} answer={this.props.answer}/>\r\n                }\r\n\r\n            </div>\r\n        )               \r\n    }\r\n}\r\n\r\nexport default SignAndSubmit;","import React, {Component} from \"react\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nimport {MDBIcon} from 'mdbreact';\r\n\r\nimport cryptr from '../js/encryption';\r\n\r\nimport NFInteractive from './NFInteractive';\r\nimport SignAndSubmit from \"../Token/SignAndSubmit\";\r\n\r\nclass AssignmentContainer extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            passed: false\r\n        }\r\n        this.passedAssignment = this.passedAssignment.bind(this);\r\n    }\r\n\r\n    passedAssignment(){\r\n        this.setState({passed: true})\r\n    }\r\n\r\n    decryptParams(){\r\n        const params = window.location.search.split(\"assignment=\")[1]\r\n        const decrypted = cryptr.decrypt(params);\r\n        return JSON.parse(decrypted);\r\n    }\r\n\r\n    render(){\r\n        if(!window.location.search.match(\"assignment\")){\r\n            let path = window.location.href.split(\"/\")\r\n            path = path[path.length - 1];\r\n            return <Redirect to={`/${path}`} />\r\n        }\r\n        const params = this.decryptParams();\r\n        console.log(\"ASSIGNMENT-PARAMS: \", params)\r\n        return(\r\n            <section className=\"text-box\">\r\n                <h2>Interactive Assignment</h2>\r\n                <p>This is an interactive assignment created on {window.location.origin.split(\"//\")[1]}. All assignments are self-grading.</p>\r\n                <p>At any time, you can check your work by pressing the \"Check Your Work\" button below the assignment. If there are any errors, they will be highlighted on the score. In the case of multiple erros, you can step through each error with arrow buttons that will appear below the assignment to see what you got right, and what you got wrong.</p>\r\n                <p>If the assingment is a dictation, you will also be allowed to play the dictation via the \"Play Dictation Excerpt\" button above the assingment. Depending on how the assignment was created, you may have a limited number of playings available. Your remaining playings will also appear above the assingment.</p>\r\n                <p>All assignments are built using the Noteflight music notation application. For information on how to interact with the Noteflight score, see <a href=\"https://www.noteflight.com/guide\" target=\"_blank\">this link</a></p>\r\n\r\n                <div id=\"assignment-container\">\r\n                    <NFInteractive params={params} passed={this.state.passed} passedAssignment={this.passedAssignment} />\r\n\r\n                    {\r\n                        this.state.passed\r\n                        &&\r\n                        <SignAndSubmit answer={params.answer}/>\r\n                    }\r\n                </div>\r\n            </section>\r\n            \r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default AssignmentContainer;","import React, {Component} from 'react';\r\n\r\nclass TutorialBanner extends Component {\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"tutorial-banner\" onClick={this.props.toggleActive}>\r\n                <div className=\"tutorial-banner-element tutorial-active-indicator\">\r\n                    <h1>{this.props.activeState ? \"-\" : \"+\"}</h1>    \r\n                </div>\r\n                <div className=\"tutorial-banner-title tutorial-banner-element\">\r\n                    <h1>{this.props.title}</h1>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TutorialBanner;","import React, {Component} from \"react\";\r\n\r\nclass ContentContainer extends Component {\r\n\r\n    render(){\r\n        const {content} = this.props\r\n        return(\r\n            <div className=\"content-container\">\r\n                {content.data}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContentContainer;","import React, {Component} from 'react';\r\n\r\nimport TutorialBanner from './TutorialBanner';\r\nimport ContentContainer from './ContentContainer';\r\n\r\n\r\nclass TutorialContainer extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            active: false\r\n        }\r\n\r\n        this.toggleActive = this.toggleActive.bind(this);\r\n    }\r\n\r\n    toggleActive(){\r\n        let active = !this.state.active\r\n        this.setState({active});\r\n    }\r\n\r\n\r\n    tutorialSectionClick(e){\r\n        let children = e.target.children\r\n        console.log(children)\r\n    }\r\n\r\n    render(){\r\n        const {content} = this.props\r\n\r\n        return(\r\n            <div className=\"tutorial-container\">\r\n                <TutorialBanner title={content.title} activeState={this.state.active} toggleActive={this.toggleActive} />\r\n                {\r\n                    this.state.active \r\n                    &&\r\n                    <ContentContainer content={content}/>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TutorialContainer;","\r\nimport React from 'react'\r\n\r\nexport function paragraph(text){\r\n    return <p>{text}</p>\r\n}\r\n\r\nexport function sectionHeading(text){\r\n    return (\r\n        <div className=\"heading-container\">\r\n            <h2>{text}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function orderedList(listItems){\r\n    return(\r\n        <ol>\r\n            {listItems.map(item => <li>{item}</li>)}\r\n        </ol>\r\n    )\r\n}\r\n\r\nexport function unorderedList(listItems){\r\n    return(\r\n        <ul>\r\n            {listItems.map(item => <li>{item}</li>)}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport function link(text, url){\r\n    return <div><a href={url} target=\"_blank\">{text}</a></div>\r\n}\r\n\r\nexport function embededVideo(vidCode){\r\n    return(\r\n        <iframe className=\"embeded-video\" src={`https://www.youtube.com/embed/${vidCode}`} style={{display: \"block\"}} width=\"560\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {\r\n    paragraph, \r\n    sectionHeading, \r\n    orderedList,\r\n    link,\r\n    // embededVideo,\r\n} from './contentTags'\r\n\r\nconst studentContent = {\r\n    title: \"Student Tutorials\",\r\n    data: [\r\n\r\n        sectionHeading(\"Introduction\"),\r\n        paragraph(\"If you received or found a link to an assignment on this site, welcome! The following tutorials well help you by:\"),\r\n        orderedList([\r\n            \"Showing how to interact with written and dictation assignments\", \r\n            \"Explaining how assignment are graded, and how incorrect errors are displayed\",\r\n            \"Showing how to generate a unique token as proof of completion\",\r\n            \"showing how to view the answer key to an assignment after it has been completed\"\r\n        ]),\r\n        paragraph(\"Note: Assignments are built using Noteflight scores. If you are not familiar with the Noteflight platform, I suggest that you visit the link below for tutorials on how to use their product.\"),\r\n        link(\"Noteflight User Guide\", \"https://www.noteflight.com/guide\"),\r\n        \r\n        sectionHeading(\"Interacting With Assignments\"),\r\n        paragraph('For both written and dictation assignments, you can check your work at any time by pressing the \"Check My Work\" button below the score. If everything matches the answer template, you will be allowed to sign and submit your assignment. Otherwise, any incorrect answers will be shown on the score. '),\r\n        paragraph('For dictation assignments, you can also play the dictation excerpt by pressing the \"Play Dictation\" button above the score. Depening on how the assignment was setup, you may have a limited number of playings available on any single attempt.'),\r\n        paragraph(\"NOTE: Interacting with assignments only works after they have been propery loaded from the noteflight server. Occasionally, there may be an issue connecting to the server, and neither of the previously mentioend buttons will do anything. If this is the case, simple refresh the page, and it should work after a few attempts.\"),\r\n        // embededVideo(\"HaBQfSAVt0s\"),\r\n\r\n        sectionHeading(\"Assignment Grading & Error Display\"),\r\n        paragraph(\"All assignments are checked for correct notes and rhythms, plus any additional grading criteria that the assignment designer may have set.\"),\r\n        paragraph('When you check your work, the program checks each measure individually against the answer template. If anything is found to be a mismatch, then the measure will be highlighted to indicate that there is an error.'),\r\n        paragraph('If the assignment requires a chord/roman numeral analysis, upper case vs lower case letters will matter. Other text, like that which you might find above the staff, are not graded for case.'),\r\n        paragraph('If there are errors when the assignment is graded, you can visually step through each measure to see where your errors are. As you step through the errors, you can see what you got right, what you got wrong, and make adjustments as needed.'),\r\n        // embededVideo(\"Da8-QfGemgo\"),\r\n\r\n        sectionHeading(\"Signing & Submitting Your Work\"),\r\n        paragraph(\"If you are doing an assignment for a course, and need proof that you completed it, the application can generate a unique token for you that your instructor can later authenticate. Once an assignment has been completed, and there are no errors, you will be allowed to sign your name and submit. Upon submitting, a token, unique to your signature and time the assignment was completed, will be generated. You can then copy this token and provide it as proof to any instructor that you completed the assignment. They can then verify the token to ensure its authenticity.\"),\r\n        paragraph(\"NOTE: Even if you are not completing the assignment for part of a course, you may still wish to generate a token and save it for later. This token will also allow you to view the answer template at a later date, without having to redo the assignment.\"),\r\n        // embededVideo(\"nsnyl8llfH4\"),\r\n\r\n        sectionHeading(\"Viewing the Answer Key After Completion\"),\r\n        paragraph(\"After you have completed an assignment, signed your name, and generated a unique token, you can view the answer key. This is particularly helpful if you want to review the answers later to help you study.\"),\r\n        paragraph('In the navigation menu of this site, go to the tab titled \"Check Token\". Here, you will be able to paste your token to authenticate it. Once authenticated, there will be an option to \"View Answers\". Click this link, and you will be taken to the answer template for the assignment.'),\r\n        // embededVideo(\"OFt3SThGi7M\"),\r\n    ],\r\n\r\n}\r\n\r\nexport default studentContent;","import React from 'react';\r\nimport {\r\n    paragraph, \r\n    sectionHeading, \r\n    orderedList,\r\n    unorderedList,\r\n    link,\r\n    // embededVideo,\r\n} from './contentTags'\r\n\r\nconst instructorContent = {\r\n    title: \"Instructor Tutorials\",\r\n    data: [\r\n        sectionHeading(\"Introduction\"),\r\n        paragraph(\"These tutorials will help instructors learn how to create and share assignments. They will cover:\"),\r\n        orderedList([\r\n            \"Creating basic written and dictation assignments\",\r\n            \"Configuring your scores on Noteflight to allow auto-grading\",\r\n            \"Optimizing your Noteflight scores for easy grading\",\r\n            \"Additional grading configurations\",\r\n            \"Editing assignments after they have been created\",\r\n            \"Suggested Practices for creating assignments on Noteflight\",\r\n        ]),\r\n        paragraph(\"Note: Assignments are built using Noteflight scores. If you are not familiar with the Noteflight platform, I suggest that you visit the link below for tutorials on how to use their product.\"),\r\n        link(\"Noteflight User Guide\", \"https://www.noteflight.com/guide\"),\r\n\r\n        sectionHeading(\"Creating Assignments\"),\r\n        paragraph(\"To create a new assignment, go to the new assignment tab in the navigation at the top of the site. There, you will be presented with a number of options for how to configure your assignment.\"),\r\n        paragraph(\"There are two required entries: both URLs linking to scores on Noteflight. The assignment score should be the score that displays to the user, without any of the answers marked. The answer score should be a copy of the assignment score, but with all the answers marked exactly as you would like them to be graded.\"),\r\n        paragraph('Additionally, you may choose between \"Written\" and \"Dictation\" assignments. There is no difference in how the two are graded, but a \"Dictation\" assignment will allow users to play audio from the answer score, and a \"Written\" assignment will not. There are also a few other available options for dictations, such as setting a maximum play count, and disabling audio playback from the user score.'),\r\n        // embededVideo(\"naE7fK-gCPs\"),\r\n\r\n        sectionHeading(\"Configuring Scores on Noteflight\"),\r\n        paragraph(\"In order for users to be able to view the scores in your assignments, and for the auto-grading to work, you must share your scores on Noteflight correctly.\"),\r\n        paragraph('Once your assignment and answer scores are set to your liking, you need to share them with individual people, groups, or all users. To do this, go to \"Score Details\" in the upper right hand corner of the screen, and then to the \"Share\" menu. If you intend for your assignment to only be viewed by a few people, you can choose to share your score with them directly, or with a group they are in. If you want you assignment to be usable by anyone, you should set sharing privileges to \"Everyone\".'),\r\n        paragraph('To enable auto grading, you must also check the box in the share settings labled \"Let people copy & export this score\" at the bottom of the share window.'),\r\n        // embededVideo(\"d92ZQmSOWGE\"),\r\n        \r\n        sectionHeading(\"Additional Grading Options\"),\r\n        paragraph(\"You can optionally specify other musical elements that you want the program to grade. None of these elements are graded by default. These elements are detaild below:\"),\r\n        unorderedList([\r\n            \"Slurs & Phrase Marks: this checks slur marks between two notes. It does not check the exact positioning of the slurs, but only that they start and end on the correct notes.\",\r\n            'Roman Numeral & Chord Analysis: This will check for any text made with the \"Chord\" text tool. For these, upper vs lower case does matter, and an answer will read as incorrect if it does not match the exact capitalization.',\r\n            'Other Text: This would be anything created with the \"Text\" tool. For this, spelling will matter, but capitalization will not. This is best used for simple text answers, like indicating intervals, cadence types, etc.',\r\n        ]),\r\n\r\n        sectionHeading(\"Editing Assignments After They Have Been Created\"),\r\n        paragraph(\"This program does not save any information you enter when you create an assignment. Rather, the link that is generated when you create your assignment contains everytning needed to recreate it when a user follows that link. While this allows for an unlimited number of assignments, you cannot edit any assignment parameters after you generate a link because any edits to the parameters would cause the link to change.\"),\r\n        paragraph(\"However, you can still edit the assignment and answer scores on Noteflight, and those changes will be reflected in you assignment. So if you want to add a few more examples, or change the answer to an existing example, you can do this on Noteflight in the linked scores.\"),\r\n\r\n        sectionHeading(\"Suggested Practices for Creating Assignment Scores\"),\r\n        paragraph(\"When creating your assignments, it is important to keep in mind that users must know exactly what to enter and where to enter it in order to pass the assignment. Therefore, I recommend the following as general guidlines for creating well structured music assignments:\"),\r\n        unorderedList([\r\n            \"Include written instructions when able, either in the document that links to the assignment, or the assignment itself.\",\r\n            \"Use colors to highlight where users should place their answers. As an example, if they need to add notes, highlight the rests where their notes should go. If they need to add text, create a text object where you would like it, and higlhight it (requires Noteflight premium to add colors).\",\r\n            \"Avoid requiring overly specific answers. This could be something like requiring full sentences for text answers, or precise rhythms that require an exact sequence of notes and rests.\",\r\n            \"Avoid ambiguous questions. Make sure there is a single answer to the questions you ask.\",\r\n            \"Keep assignments simple, and focus on just one or two things. If an assingment has too many elements in it, it can be challenging for users to remember everything they are supposed to enter.\",\r\n            \"Always do your own assignments after you make them to ensure they can be completed as you designed.\"\r\n        ]),\r\n        paragraph(\"Example assignments can be found at the links below:\"),\r\n        link(\"Name the Note\", \"https://bit.ly/2XyFt8J\"),\r\n        link(\"Writing Major Scales\", \"https://bit.ly/2GWV1hs\"),\r\n        link(\"Simple Melodic Dictation\", \"https://bit.ly/2EwLQkq\"),\r\n\r\n        \r\n        \r\n    ]\r\n\r\n}\r\n\r\nexport default instructorContent;","import React, {Component} from 'react';\r\nimport TutorialContainer from './TutorialContainer';\r\n\r\nimport studentContent from './content/studentContent'\r\nimport instructorContent from './content/instructorContent'\r\n\r\nclass InfoContainer extends Component {\r\n\r\n\r\n    render(){\r\n        const domainName = window.location.origin.split(\"//\")[1]\r\n        return(\r\n            <div>\r\n                <section className=\"text-box\">                        \r\n                    <h1 className=\"information-heading\">{domainName}</h1>\r\n                    <p className=\"information-paragraph\"><em>Created and maintained by <a href=\"http://quinndizon.com\" target=\"_blank\">Quinn Dizon</a></em></p>\r\n                    <h2 className=\"information-heading\"><em>NOTE: This software is still in development. Any use at this stage carries no expressed or implied guarantee of full functionality</em></h2>\r\n                    <p>\r\n                        {\r\n                            \r\n                            `Welcome to ${domainName} , a tool that allows music teachers to easily create and link to high quality, interactive, self-grading music assignments. \r\n                            Whether you are a teacher or a student, there is no signup required, and it is absolutely free to use.\r\n                            `\r\n\r\n                        }\r\n                    </p>\r\n                    <p>\r\n                        {\r\n                            `\r\n                            This application is built using the Noteflight notation interface. If you are unfamiliar with their product, I highly recommend that you visit their site to learn more about the wonderful features Noteflight provides.\r\n                            `\r\n                        }\r\n                    </p>\r\n                    <a href=\"https://www.noteflight.com\" target=\"_blank\"><p>Noteflight.com</p></a>\r\n                    <p>\r\n                        Click the appropriate category below for more information and tutorials on how to use this site.\r\n                    </p>\r\n                </section>\r\n                <TutorialContainer content={studentContent}/>\r\n                <TutorialContainer content={instructorContent}/>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InfoContainer;","import React, {Component} from 'react';\r\n\r\nimport cryptr from '../js/encryption';\r\n\r\nclass DisplayDecryptedToken extends Component {\r\n\r\n    decryptToken(token){\r\n        try{\r\n            cryptr.decrypt(token)\r\n        } catch(error){\r\n            return null\r\n        }\r\n        return cryptr.decrypt(token)\r\n    }\r\n\r\n    parseDate(date){\r\n        const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\r\n        date = new Date(date)\r\n        return `${days[date.getDay()]}, ${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}, at ${date.getHours()}:${date.getMinutes()} `\r\n    }\r\n\r\n    render(){\r\n        let decrypted = JSON.parse(this.decryptToken(this.props.token))\r\n        return(\r\n            <div id='decrypted-token' className='section-box'>\r\n                {\r\n                    decrypted\r\n                    &&\r\n                    <div className=\"token-info\">\r\n                        <h2 className=\"section-heading\">Verified</h2>\r\n                        <h4>Name: {decrypted.studentName}</h4>\r\n                        <h4>Completed On: {this.parseDate(decrypted.date)}</h4>\r\n                        <a href={decrypted.answer} target=\"_blank\"><h4>View Answers</h4></a>\r\n                    </div>\r\n                }               \r\n\r\n                {\r\n                    !decrypted\r\n                    &&\r\n                    <h2 className=\"section-heading\">The token you have entered is invalid</h2>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DisplayDecryptedToken;","import React, {Component} from 'react';\r\nimport DisplayDecryptedToken from './DisplayDecryptedToken';\r\n\r\nclass TokenChecker extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentToken: null\r\n        }\r\n\r\n        this.setToken = this.setToken.bind(this);\r\n    }\r\n\r\n    setToken(currentToken){\r\n        this.setState({currentToken})\r\n    }\r\n\r\n    handleSubmit(setToken){\r\n        return (e) => {\r\n            e.preventDefault();\r\n            setToken(document.getElementById(\"encrypted-token\").value)\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"token-checker\" className=\"text-box\">\r\n                <form id=\"token-input-form\" onSubmit={this.handleSubmit(this.setToken)}>\r\n                    <h2>Token Checker</h2>\r\n                    <p>Paste your token in the text box below. If a token is authentic, information will be displayed, including the user's signature, the date and time completed, and the answer template to the assignment.</p>\r\n                    <textarea id=\"encrypted-token\" style={{width: \"95%\", margin: \"0 auto\", minHeight: \"10em\"}}></textarea><br/>\r\n\r\n                    <input type=\"submit\" value=\"Verify Token\" />\r\n                </form>\r\n\r\n                {\r\n                    !!this.state.currentToken\r\n                    &&\r\n                    <DisplayDecryptedToken token={this.state.currentToken} />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TokenChecker;","import React, { Component } from 'react';\n\n\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\n\nimport './App.css';\n\n\nimport './css/info.css'\nimport './css/input.css'\nimport './css/new-assignment.css'\nimport './css/assignment.css'\nimport './css/token.css'\nimport './css/nav-banner.css'\nimport './css/media-queries.css'\n\n\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport Navigation from './Banner/Navigation';\nimport NewAssignmentContainer from './NewAssignments/NewAssignmentContainer';\nimport AssignmentContainer from './Assignment/AssignmentContainer';\nimport InfoContainer from './Information/InfoContainer';\nimport TokenChecker from './Token/TokenChecker';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    let assignment = new window.URLSearchParams(window.location.search).get(\"assignment\")\n    \n    this.state = {\n      path : \"/\",\n      assignment,\n    }\n\n    this.setPath = this.setPath.bind(this);\n  }\n\n  setPath(path){\n    this.setState({path});\n    this.forceUpdate();\n\n  }\n\n  render() {\n    const search = new window.URLSearchParams(window.location.search);\n    let path = window.location.href.split(\"/\")\n    path = path[path.length - 1];\n    console.log(\"LOCATION: \", window.location.href)\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navigation setPath={this.setPath} />\n          <div className=\"app-body\">\n\n          {\n            // if the user got here through an assignment link\n            // but they left the assignment page, provide a return link to the assignment\n            (this.state.assignment && !search.get(\"assignment\"))\n            &&\n            <a href={window.location.origin + \"?assignment=\" + this.state.assignment}>Return to Assignment</a>\n          }\n\n          {\n            (this.state.path === \"/\" && search.get(\"assignment\"))\n            &&\n            <AssignmentContainer />\n          }\n          \n          {\n            (this.state.path === \"/\" && !search.get(\"assignment\"))\n            &&\n            <Route path={\"/\"} exact component={InfoContainer} />\n          }\n          <Route path=\"/new\" exact component={NewAssignmentContainer} />\n          <Route path=\"/token-checker\" exact component={TokenChecker} />\n\n          \n\n          </div>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}